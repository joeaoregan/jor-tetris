{"ast":null,"code":"import { COLS, ROWS, POINTS } from './constants';\nimport * as i0 from \"@angular/core\";\nexport let GameService = /*#__PURE__*/(() => {\n  class GameService {\n    valid(p, board) {\n      return p.shape.every((row, dy) => {\n        return row.every((value, dx) => {\n          let x = p.x + dx;\n          let y = p.y + dy;\n          return this.isEmpty(value) || this.insideWalls(x) && this.aboveFloor(y) && this.notOccuppied(board, x, y);\n        });\n      });\n    }\n    isEmpty(value) {\n      return value === 0;\n    }\n    insideWalls(x) {\n      return x >= 0 && x < COLS;\n    }\n    aboveFloor(y) {\n      return y <= ROWS;\n    }\n    notOccuppied(board, x, y) {\n      return board[y] && board[y][x] === 0;\n    }\n    rotate(piece) {\n      let p = JSON.parse(JSON.stringify(piece));\n      for (let y = 0; y < p.shape.length; ++y) {\n        for (let x = 0; x < y; ++x) {\n          [p.shape[x][y], p.shape[y][x]] = [p.shape[y][x], p.shape[x][y]];\n        }\n      }\n      p.shape.forEach(row => row.reverse());\n      return p;\n    }\n    getLinesClearedPoints(lines, level) {\n      const lineClearPoints = lines === 1 ? POINTS.SINGLE : lines === 2 ? POINTS.DOUBLE : lines === 3 ? POINTS.TETRIS : 0;\n      return (level + 1) * lineClearPoints;\n    }\n    static #_ = this.ɵfac = function GameService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GameService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GameService,\n      factory: GameService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GameService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}